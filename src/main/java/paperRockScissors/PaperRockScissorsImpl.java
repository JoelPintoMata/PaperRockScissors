package paperRockScissors;

import java.util.*;
import java.util.stream.Collectors;


/**
 *
 */
public class PaperRockScissorsImpl implements PaperRockScissors {

    private final Scanner scanner;

    private int numberOfPlays;

    private String[] players = {"Computer", "Player"};
    private int[] score = {0, 0};

    /**
     * PaperRockScissors constructor
     * @param numberOfPlays number of game plays, or -1 to play until a winner is found
     * @param scanner
     */
    public PaperRockScissorsImpl(int numberOfPlays, Scanner scanner){
        this.numberOfPlays = numberOfPlays;
        this.scanner = scanner;
    }

    @Override
    public void start() {
        while (!isOver()) {
            Optional<Integer> handWinner;
            if((handWinner = getHandResult(playNextHand())).isPresent())
                score[handWinner.get()]++;
        }
        stop();
    }

    @Override
    public void stop() {
        if(score[0] == score[1]) {
            System.out.println("It's a tie, winners were found");
        } else if(score[0] > score[1]) {
            System.out.println("The winner is: " + players[0]);
        } else
            System.out.println("The winner is: " + players[1]);
    }

    /**
     * Checks if this game is over
     * @return true if the game is over, false, otherwise
     */
    public boolean isOver(){
        return numberOfPlays > 1;
    }

    /**
     * Plays the next hand
     * @return a list with each players play
     */
    public List<Play> playNextHand() {
        List<Play> play = new ArrayList<>(2);

//        player 1 plays are generated by the computer
        ShapresEnum player1Play = getComputerPlay();
//        player 2 plays are read from the command-line
        ShapresEnum player2Play = getCommandLinePlay();

        play.add(new Play(0, player1Play));
        play.add(new Play(1, player2Play));

        System.out.println(players[0] + " " + player1Play + " vs " + players[1] + " " + player2Play);

//        decrease the number of plays left to play
        numberOfPlays--;

        return play;
    }

    /**
     * Randomly generates a computer play
     */
    protected ShapresEnum getComputerPlay() {
        return ShapresEnum.getRandom();
    }

    /**
     * Reads a player play from the command-line
     */
    private ShapresEnum getCommandLinePlay() {
        ShapresEnum shapresEnumAux;
        while(true){
            System.out.println(players[1] + " enter your next play ((p)aper, (r)ock or (s)cissors)");
            shapresEnumAux = ShapresEnum.get(scanner.next());
            if(shapresEnumAux == null)
                System.out.println("(invalid choice (p)aper, (r)ock or (s)cissors)\n");
            else
                return shapresEnumAux;
        }
    }

    /**
     * Determines a given hand result
     * @param plays a list containing plays each player play
     * @return an Optional containing the winner id, none if the hand is a tie
     */
    protected Optional<Integer> getHandResult(List<Play> plays) {
        List<Play> play1 = plays.stream().filter(x -> x.getShape().equals(ShapresEnum.PAPER)).collect(Collectors.toList());
        List<Play> play2 = plays.stream().filter(x -> x.getShape().equals(ShapresEnum.ROCK)).collect(Collectors.toList());
        List<Play> play3 = plays.stream().filter(x -> x.getShape().equals(ShapresEnum.SCISSORS)).collect(Collectors.toList());

        Optional<Integer> winner = Optional.empty();

        if(!play1.isEmpty() && !play2.isEmpty()) {
            System.out.print("Paper beats (wraps) rock ");
            winner = Optional.ofNullable(play1.get(0).getPlayerId());
        } else if(!play2.isEmpty() && !play3.isEmpty()) {
            System.out.print("Rock beats (blunts) scissors ");
            return Optional.ofNullable(play2.get(0).getPlayerId());
        } else if(!play1.isEmpty() && !play3.isEmpty()) {
            System.out.print("Scissors beats (cuts) paper ");
            return Optional.ofNullable(play3.get(0).getPlayerId());
        }

        if(winner.isPresent())
            System.out.println(players[winner.get()] + " wins this hand");
        else
            System.out.println("This hand is a tie");

        return winner;
    }
}