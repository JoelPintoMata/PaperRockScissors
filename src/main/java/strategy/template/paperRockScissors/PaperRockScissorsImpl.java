package strategy.template.paperRockScissors;

import strategy.template.StrategyTemplate;

import java.util.Scanner;

/**
 * Step 3 implementation of the "Strategy" design pattern
 *  "Derived classes could be implemented using the Template Method pattern", that is, an concrete implementation of the Paper, Rock and Scissors game that extends the polymorphic strategy games template
 */
public class PaperRockScissorsImpl extends StrategyTemplate {

    private int numberOfPlays;
    private PaperRockScissorsSolution paperRockScissorsSolution;

//    create a scanner so we can read the command-line input
    Scanner scanner = new Scanner(System.in);

    private PaperRockScissorsEnum player1Play;
    private PaperRockScissorsEnum player2Play;

    private String player1;
    private String player2;
    private String winnerIs;

    /**
     * Default constructor
     */
    public PaperRockScissorsImpl() {
        this.paperRockScissorsSolution = new PaperRockScissorsSolutionImpl();
    }

    /**
     * PaperRockScissors constructor
     * @param player1 player 1 name
     * @param player2 player 2 name
     * @param numberOfPlays number of game plays, or -1 to play until a winner is found
     * @param paperRockScissorsSolution a solution implementarion for the paper, rock and scissors
     */
    public PaperRockScissorsImpl(String player1, String player2, int numberOfPlays, PaperRockScissorsSolution paperRockScissorsSolution){
        this.player1 = player1;
        this.player2 = player2;
        this.numberOfPlays = numberOfPlays;
        this.paperRockScissorsSolution = paperRockScissorsSolution;
    }

    @Override
    protected void createPlayers() {
//        TODO read the players names from the command-line
        this.player1 = "computer";
        this.player2 = "human";
    }

    /**
     * Sets the number of maximum plays for this game
     */
    protected void setNumberOfPlays() {
//        number of plays are read from the command-line
        System.out.println("Enter the maximum number of plays of -1 to play until a winner is found: ");
        try {
            numberOfPlays = Integer.parseInt(scanner.next());
        } catch (NumberFormatException e) {
            System.out.println("(the maximum number of plays should be of type number)\n");
        }
    }

    @Override
    protected void start() {
        System.out.println( "start");
        createPlayers();
        while(numberOfPlays == 0) {
            setNumberOfPlays();
        }
    }

    @Override
    protected void stop() {
        if(winnerIs != null)
            System.out.println("The winner is: " + winnerIs);
        else
            System.out.println("No winners were found");
    }

    @Override
    protected boolean nextTry() {
//        player 1 plays are generated by the computer
        player1Play = getCoputerPlay();

//        player 2 plays are read from the command-line
        player2Play = getCommandLinePlay();

        System.out.println(player1 + " " + player1Play + " vs " + player2 + " " + player2Play);

//        decrease the number of plays left to play
        if(numberOfPlays != -1)
            numberOfPlays--;
        return true;
    }

    /**
     * Randomly generates a computer play
     */
    private PaperRockScissorsEnum getCoputerPlay() {
        return PaperRockScissorsEnum.getRandom();
    }

    /**
     * Reads a player play from the command-line
     */
    private PaperRockScissorsEnum getCommandLinePlay() {
        PaperRockScissorsEnum paperRockScissorsEnumAux;
        while(true){
            System.out.println(player2 + " enter your next play ((p)aper, (r)ock or (s)cissors)");
            paperRockScissorsEnumAux = PaperRockScissorsEnum.get(scanner.next());
            if(paperRockScissorsEnumAux == null)
                System.out.println("(invalid choice (p)aper, (r)ock or (s)cissors)\n");
            else
                return paperRockScissorsEnumAux;
        }
    }

    @Override
    protected boolean isOver(){
        if(numberOfPlays != -1)
            if(numberOfPlays == 0)
                return true;
        return false;
    }

    @Override
    protected boolean isSolution() {
        winnerIs = paperRockScissorsSolution.isSolution(player1, player1Play, player2, player2Play);
        if(winnerIs != null)
            return true;
        return false;
    }
}